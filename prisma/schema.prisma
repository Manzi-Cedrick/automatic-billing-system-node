// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

enum Privilege {
  ADMIN
  EMPLOYEE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  PENDING
  COMPLETED
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  privilege Privilege
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @db.ObjectId
  status    Status
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]
}

model Task {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  task      String
  sub_task  String
  status    TaskStatus
  Reports   Report[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Employee {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    String     @db.ObjectId
  status    Status
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Reports   Report[]
}

model Role {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  value    String
  fee      Float
  User     User[]
  Employee Employee[]
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @db.ObjectId
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String   @db.ObjectId
  task_detail String
  no_hours    Float
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String   @db.ObjectId
  travel      Float?
  expense     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
